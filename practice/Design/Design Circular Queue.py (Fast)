class MyCircularQueue:

    def __init__(self, k: int):
        """
        Initialize your data structure here. Set the size of the queue to be k.
        """
        self.l = list()
        self.ln = 0
        self.max_len = k
        

    def enQueue(self, value: int) -> bool:
        """
        Insert an element into the circular queue. Return true if the operation is successful.
        """
        if self.ln < self.max_len:
            self.l.append(value)
            self.ln += 1
            return True
        return False
        

    def deQueue(self) -> bool:
        """
        Delete an element from the circular queue. Return true if the operation is successful.
        """
        if self.ln:
            self.ln -= 1
            self.l.pop(0)
            return True
        return False
        

    def Front(self) -> int:
        """
        Get the front item from the queue.
        """
        if self.ln:
            return self.l[0]
        return -1

    def Rear(self) -> int:
        """
        Get the last item from the queue.
        """
        if self.ln:
            return self.l[-1]
        return -1


    def isEmpty(self) -> bool:
        """
        Checks whether the circular queue is empty or not.
        """
        return False if self.ln else True

    def isFull(self) -> bool:
        """
        Checks whether the circular queue is full or not.
        """
        return True if self.max_len == self.ln else False


# Your MyCircularQueue object will be instantiated and called as such:
# obj = MyCircularQueue(k)
# param_1 = obj.enQueue(value)
# param_2 = obj.deQueue()
# param_3 = obj.Front()
# param_4 = obj.Rear()
# param_5 = obj.isEmpty()
# param_6 = obj.isFull()
